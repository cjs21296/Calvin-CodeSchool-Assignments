/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.mccneb.cs;

import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.stream.Collectors;

public class App {

    public static final String BASE_DIR = "src/main/resources/";
    private final ObjectMapper mapper;

    public String getGreeting() {
        return "Hello world!";
    }

    public static void main(String[] args) {
        try {
            App app = new App();
            app.run(); // Get the heck out of main
            System.out.println("Normal termination.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public App() {
        mapper = new ObjectMapper();
    }

    private void run() throws IOException {
        System.out.println(getGreeting());
        List<Path> lstFiles = getAllPaths();
        System.out.format("There are %d files to examine.\n", lstFiles.size());
        formatFiles("data/1/551.json","data/1/551_credits.json");

        Food waffles = makeWaffles();
        mapper.writerWithDefaultPrettyPrinter().writeValue(new File("waffles.json"),waffles);
        System.out.println("Just created waffles.json");
    }

    private Food makeWaffles() {
        Food food = new Food("Waffles");
        food.addIngredient(new Ingredient("egg"),new Ingredient("flour"),new Ingredient("Syrup"),new Ingredient("Butter"));
        return food;
    }

    private void formatFiles(String... fileNames) throws IOException {
        for (String fileName: fileNames) {
            String jsonString = readWholeFile(fileName);
            String indented = formatJson(jsonString);
            writeWholeFile(fileName,indented);
        }
    }

    private String formatJson(String jsonString) throws com.fasterxml.jackson.core.JsonProcessingException {
        Object jsonObject = mapper.readValue(jsonString, Object.class);
        String indented=mapper.writerWithDefaultPrettyPrinter().writeValueAsString(jsonObject);
        return indented;
    }

    private void writeWholeFile(String fileName, String indented) throws FileNotFoundException {
        PrintWriter out = new PrintWriter(BASE_DIR + fileName);
        out.println(indented);
        out.close();
    }

    private String readWholeFile(String fileName) throws IOException {
        LineNumberReader in = new LineNumberReader(new FileReader(BASE_DIR+fileName));
        StringBuilder wholeFileStringBuffer=new StringBuilder();
        String line=null;
        while (null != (line = in.readLine())) {
            wholeFileStringBuffer.append(line).append("\n");
        }
        in.close();
        return wholeFileStringBuffer.toString();
    }

    private List<Path> getAllPaths() throws IOException {
        List<Path> lstFiles = Files.walk(Paths.get("src/main/resources/data"))
                .filter(Files::isRegularFile).collect(Collectors.toList());
        return lstFiles;
    }
}
